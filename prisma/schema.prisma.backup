generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id               Int               @id @default(autoincrement())
  name             String
  dateOfBirth      DateTime
  guardianName     String
  contactNumber    String
  medicalNotes     String?
  registrationDate DateTime          @default(now())
  academyId        Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  monthlyFee       Float             @default(0)
  classes          ClassEnrollment[]
  academy          Academy           @relation(fields: [academyId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([academyId])
}

model Coach {
  id               Int              @id @default(autoincrement())
  name             String
  hourlyRate       Float
  payoutMethod     String
  bankDetails      String?
  contactNumber    String
  email            String?
  academyId        Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  paymentType      PaymentType      @default(HOURLY)
  sessionRate      Float            @default(0)
  monthlySalary    Float            @default(0)
  paymentFrequency PaymentFrequency @default(WEEKLY)
  availability     Availability[]
  classes          Class[]
  academy          Academy          @relation(fields: [academyId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([academyId])
}

model Availability {
  id          Int      @id @default(autoincrement())
  coachId     Int
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  coach       Coach    @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@index([coachId])
  @@index([date])
}

model Court {
  id        Int      @id @default(autoincrement())
  name      String
  location  String?
  academyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academy   Academy  @relation(fields: [academyId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([academyId])
}

model Class {
  id          Int               @id @default(autoincrement())
  name        String
  coachId     Int
  locationId  Int
  academyId   Int
  dayOfWeek   Int
  startTime   DateTime
  endTime     DateTime
  isRecurring Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  coach       Coach             @relation(fields: [coachId], references: [id])
  location    Location          @relation(fields: [locationId], references: [id])
  academy     Academy           @relation(fields: [academyId], references: [id], onDelete: Cascade)
  students    ClassEnrollment[]
  sessions    ClassSession[]

  @@index([coachId])
  @@index([locationId])
  @@index([academyId])
}

model ClassEnrollment {
  id         Int          @id @default(autoincrement())
  studentId  Int
  classId    Int
  joinedAt   DateTime     @default(now())
  attendance Attendance[]
  class      Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  student    Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
}

model ClassSession {
  id         Int          @id @default(autoincrement())
  classId    Int
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  notes      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  attendance Attendance[]
  class      Class        @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@index([date])
}

model Attendance {
  id               Int              @id @default(autoincrement())
  sessionId        Int
  enrollmentId     Int?
  status           AttendanceStatus @default(PRESENT)
  remarks          String?
  markedAt         DateTime         @default(now())
  markedBy         Int
  notificationSent Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  enrollment       ClassEnrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  session          ClassSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  studentId        Int?

  @@index([sessionId])
  @@index([enrollmentId])
  @@index([status])
  @@index([studentId])
  @@index([sessionId, enrollmentId])
}

model FreeTrialRequest {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  phone         String
  academyName   String
  studentsCount String
  status        String    @default("pending")
  password      String?
  academyId     Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  expiry        DateTime?
  approvalDate  DateTime?
  academy       Academy?  @relation(fields: [academyId], references: [id])

  @@index([email])
  @@index([status])
}

model Academy {
  id                  Int                @id @default(autoincrement())
  name                String
  description         String?
  email               String             @unique
  phone               String?
  website             String?
  headCoach           String?
  headCoachEmail      String?
  headCoachPhone      String?
  headCoachQualification String?
  subscriptionPlan    String             @default("Basic")
  maxStudents         Int                @default(100)
  maxCoaches          Int                @default(5)
  isActive            Boolean            @default(true)
  defaultCoachPassword String            @default("coach")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  coaches             Coach[]
  courts              Court[]
  classes             Class[]
  freeTrialRequests   FreeTrialRequest[]
  locations           Location[]
  students            Student[]
  users               User[]

  @@index([email])
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  academyId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      UserRole  @default(ACADEMY_ADMIN)
  academy   Academy   @relation(fields: [academyId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([academyId])
}

model Location {
  id         Int      @id @default(autoincrement())
  name       String
  address    String
  courts     Int      @default(1)
  facilities String?
  academyId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  academy    Academy  @relation(fields: [academyId], references: [id], onDelete: Cascade)
  classes    Class[]

  @@index([academyId])
}

enum UserRole {
  SYSTEM_ADMIN
  ACADEMY_ADMIN
  COACH
}

enum PaymentType {
  HOURLY
  PER_SESSION
}

enum PaymentFrequency {
  WEEKLY
  MONTHLY
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
}
